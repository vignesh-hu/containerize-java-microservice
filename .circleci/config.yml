# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/

    working_directory: ~/containerize-java-microservice

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      - checkout
      - setup_remote_docker
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "pom.xml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: mvn dependency:go-offline

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # run tests!
      - run: mvn integration-test
      - run: mvn clean install
      # Build docker image
      - run: docker build $DOCKER_REPOSITORY/java-webapp:$CIRCLE_BUILD_NUM .
      # Run docker container
      - run: docker run -d -p 8080:8080 --name java-webapp $DOCKER_REPOSITORY/java-webapp:$CIRCLE_BUILD_NUM
      # Test docker image
      - run: sleep 20 && docker exec java-webapp curl --retry 10 http://localhost:8080/
      # Tagging Image with dynamic tag
      - run: docker tag $DOCKER_REPOSITORY/java-webapp:$CIRCLE_BUILD_NUM $DOCKER_REPOSITORY/java-webapp:latest
      # docker login
      - run: docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
      # Push docker image to docker registry
      - run: docker push $DOCKER_REPOSITORY/java-webapp:$CIRCLE_BUILD_NUM
      - run: docker push $DOCKER_REPOSITORY/java-webapp:latest
